// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/01/Mux8Way16.hdl

/**
 * 8-way 16-bit multiplexor:
 * out = a if sel == 000
 *       b if sel == 001
 *       etc.
 *       h if sel == 111
 */

CHIP Mux8Way16 {
    IN a[16], b[16], c[16], d[16],
       e[16], f[16], g[16], h[16],
       sel[3];
    OUT out[16];

    PARTS:
    Mux(a=a[0], b=b[0], sel=sel[0], out=w1);
    Mux(a=c[0], b=d[0], sel=sel[0], out=w2);
    Mux(a=e[0], b=f[0], sel=sel[0], out=x1);
    Mux(a=g[0], b=h[0], sel=sel[0], out=x2);
    Mux(a=w1, b=w2, sel=sel[1], out=z1);
    Mux(a=x1, b=x2, sel=sel[1], out=z2);
    Mux(a=z1, b=z2, sel=sel[2], out=out[0]);

    Mux(a=a[1], b=b[1], sel=sel[0], out=w3);
    Mux(a=c[1], b=d[1], sel=sel[0], out=w4);
    Mux(a=e[1], b=f[1], sel=sel[0], out=x3);
    Mux(a=g[1], b=h[1], sel=sel[0], out=x4);
    Mux(a=w3, b=w4, sel=sel[1], out=z3);
    Mux(a=x3, b=x4, sel=sel[1], out=z4);
    Mux(a=z3, b=z4, sel=sel[2], out=out[1]);

    Mux(a=a[2], b=b[2], sel=sel[0], out=w5);
    Mux(a=c[2], b=d[2], sel=sel[0], out=w6);
    Mux(a=e[2], b=f[2], sel=sel[0], out=x5);
    Mux(a=g[2], b=h[2], sel=sel[0], out=x6);
    Mux(a=w5, b=w6, sel=sel[1], out=z5);
    Mux(a=x5, b=x6, sel=sel[1], out=z6);
    Mux(a=z5, b=z6, sel=sel[2], out=out[2]);

    Mux(a=a[3], b=b[3], sel=sel[0], out=w7);
    Mux(a=c[3], b=d[3], sel=sel[0], out=w8);
    Mux(a=e[3], b=f[3], sel=sel[0], out=x7);
    Mux(a=g[3], b=h[3], sel=sel[0], out=x8);
    Mux(a=w7, b=w8, sel=sel[1], out=z7);
    Mux(a=x7, b=x8, sel=sel[1], out=z8);
    Mux(a=z7, b=z8, sel=sel[2], out=out[3]);

    Mux(a=a[4], b=b[4], sel=sel[0], out=w9);
    Mux(a=c[4], b=d[4], sel=sel[0], out=w10);
    Mux(a=e[4], b=f[4], sel=sel[0], out=x9);
    Mux(a=g[4], b=h[4], sel=sel[0], out=x10);
    Mux(a=w9, b=w10, sel=sel[1], out=z9);
    Mux(a=x9, b=x10, sel=sel[1], out=z10);
    Mux(a=z9, b=z10, sel=sel[2], out=out[4]);

    Mux(a=a[5], b=b[5], sel=sel[0], out=w11);
    Mux(a=c[5], b=d[5], sel=sel[0], out=w12);
    Mux(a=e[5], b=f[5], sel=sel[0], out=x11);
    Mux(a=g[5], b=h[5], sel=sel[0], out=x12);
    Mux(a=w11, b=w12, sel=sel[1], out=z11);
    Mux(a=x11, b=x12, sel=sel[1], out=z12);
    Mux(a=z11, b=z12, sel=sel[2], out=out[5]);

    Mux(a=a[6], b=b[6], sel=sel[0], out=w13);
    Mux(a=c[6], b=d[6], sel=sel[0], out=w14);
    Mux(a=e[6], b=f[6], sel=sel[0], out=x13);
    Mux(a=g[6], b=h[6], sel=sel[0], out=x14);
    Mux(a=w13, b=w14, sel=sel[1], out=z13);
    Mux(a=x13, b=x14, sel=sel[1], out=z14);
    Mux(a=z13, b=z14, sel=sel[2], out=out[6]);

    Mux(a=a[7], b=b[7], sel=sel[0], out=w15);
    Mux(a=c[7], b=d[7], sel=sel[0], out=w16);
    Mux(a=e[7], b=f[7], sel=sel[0], out=x15);
    Mux(a=g[7], b=h[7], sel=sel[0], out=x16);
    Mux(a=w15, b=w16, sel=sel[1], out=z15);
    Mux(a=x15, b=x16, sel=sel[1], out=z16);
    Mux(a=z15, b=z16, sel=sel[2], out=out[7]);

    Mux(a=a[8], b=b[8], sel=sel[0], out=w17);
    Mux(a=c[8], b=d[8], sel=sel[0], out=w18);
    Mux(a=e[8], b=f[8], sel=sel[0], out=x17);
    Mux(a=g[8], b=h[8], sel=sel[0], out=x18);
    Mux(a=w17, b=w18, sel=sel[1], out=z17);
    Mux(a=x17, b=x18, sel=sel[1], out=z18);
    Mux(a=z17, b=z18, sel=sel[2], out=out[8]);

    Mux(a=a[9], b=b[9], sel=sel[0], out=w19);
    Mux(a=c[9], b=d[9], sel=sel[0], out=w20);
    Mux(a=e[9], b=f[9], sel=sel[0], out=x19);
    Mux(a=g[9], b=h[9], sel=sel[0], out=x20);
    Mux(a=w19, b=w20, sel=sel[1], out=z19);
    Mux(a=x19, b=x20, sel=sel[1], out=z20);
    Mux(a=z19, b=z20, sel=sel[2], out=out[9]);

    Mux(a=a[10], b=b[10], sel=sel[0], out=w21);
    Mux(a=c[10], b=d[10], sel=sel[0], out=w22);
    Mux(a=e[10], b=f[10], sel=sel[0], out=x21);
    Mux(a=g[10], b=h[10], sel=sel[0], out=x22);
    Mux(a=w21, b=w22, sel=sel[1], out=z21);
    Mux(a=x21, b=x22, sel=sel[1], out=z22);
    Mux(a=z21, b=z22, sel=sel[2], out=out[10]);

    Mux(a=a[11], b=b[11], sel=sel[0], out=w23);
    Mux(a=c[11], b=d[11], sel=sel[0], out=w24);
    Mux(a=e[11], b=f[11], sel=sel[0], out=x23);
    Mux(a=g[11], b=h[11], sel=sel[0], out=x24);
    Mux(a=w23, b=w24, sel=sel[1], out=z23);
    Mux(a=x23, b=x24, sel=sel[1], out=z24);
    Mux(a=z23, b=z24, sel=sel[2], out=out[11]);

    Mux(a=a[12], b=b[12], sel=sel[0], out=w25);
    Mux(a=c[12], b=d[12], sel=sel[0], out=w26);
    Mux(a=e[12], b=f[12], sel=sel[0], out=x25);
    Mux(a=g[12], b=h[12], sel=sel[0], out=x26);
    Mux(a=w25, b=w26, sel=sel[1], out=z25);
    Mux(a=x25, b=x26, sel=sel[1], out=z26);
    Mux(a=z25, b=z26, sel=sel[2], out=out[12]);

    Mux(a=a[13], b=b[13], sel=sel[0], out=w27);
    Mux(a=c[13], b=d[13], sel=sel[0], out=w28);
    Mux(a=e[13], b=f[13], sel=sel[0], out=x27);
    Mux(a=g[13], b=h[13], sel=sel[0], out=x28);
    Mux(a=w27, b=w28, sel=sel[1], out=z27);
    Mux(a=x27, b=x28, sel=sel[1], out=z28);
    Mux(a=z27, b=z28, sel=sel[2], out=out[13]);

    Mux(a=a[14], b=b[14], sel=sel[0], out=w29);
    Mux(a=c[14], b=d[14], sel=sel[0], out=w30);
    Mux(a=e[14], b=f[14], sel=sel[0], out=x29);
    Mux(a=g[14], b=h[14], sel=sel[0], out=x30);
    Mux(a=w29, b=w30, sel=sel[1], out=z29);
    Mux(a=x29, b=x30, sel=sel[1], out=z30);
    Mux(a=z29, b=z30, sel=sel[2], out=out[14]);

    Mux(a=a[15], b=b[15], sel=sel[0], out=w31);
    Mux(a=c[15], b=d[15], sel=sel[0], out=w32);
    Mux(a=e[15], b=f[15], sel=sel[0], out=x31);
    Mux(a=g[15], b=h[15], sel=sel[0], out=x32);
    Mux(a=w31, b=w32, sel=sel[1], out=z31);
    Mux(a=x31, b=x32, sel=sel[1], out=z32);
    Mux(a=z31, b=z32, sel=sel[2], out=out[15]);
}
